AWSTemplateFormatVersion: "2010-09-09"
Description: ToiLabs shared resources - ALB, RDS, SGs, IAM roles
#Kafka global
#Kafka serverless
#Update nginx.conf and connect uri
#Update airflow

Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
  PublicSubnet1Id:
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2Id:
    Type: AWS::EC2::Subnet::Id

Resources:
  # -------------------- SECURITY GROUPS --------------------

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to ALB
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags: [{ Key: Name, Value: toilabs-alb-sg }]

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Internal service-to-service communication
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags: [{ Key: Name, Value: toilabs-svc-sg }]

  KafkaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow public Kafka IAM access on port 9198
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 9198
          ToPort: 9198
          CidrIp: 0.0.0.0/0 # For true public, or specify your allowed IP/range
      Tags:
        - Key: Name
          Value: toilabs-kafka-sg

  PostgresSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Postgres access from backend
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ServiceSecurityGroup
      Tags: [{ Key: Name, Value: toilabs-postgres-sg }]
  ToiLabsDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for ToiLabs RDS
      SubnetIds:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id

  # -------------------- ALB + TARGET GROUPS --------------------

  ToiLabsALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: toilabs-alb
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnet1Id, !Ref PublicSubnet2Id]
      SecurityGroups: [!Ref ALBSecurityGroup]
      Tags: [{ Key: Name, Value: toilabs-alb }]

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCId
      Protocol: HTTP
      Port: 80
      TargetType: ip
      HealthCheckPath: /
      Name: frontend-tg

  AirflowTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCId
      Protocol: HTTP
      Port: 8080
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30 # Time between health checks
      HealthCheckTimeoutSeconds: 5 # Timeout for each health check
      HealthyThresholdCount: 2 # Number of successful checks to mark healthy
      UnhealthyThresholdCount: 3 # Number of failed checks to mark unhealthy
      Name: airflow-tg

  MLModelTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCId
      Protocol: HTTP
      Port: 6000
      TargetType: ip
      HealthCheckPath: /ml-model/
      Name: ml-model-tg

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCId
      Protocol: HTTP
      Port: 8081
      TargetType: ip
      HealthCheckPath: /spring-backend/api/health
      Name: backend-tg

  ALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ToiLabsALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup

  AirflowPathRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListenerHTTP
      Priority: 10
      Conditions:
        - Field: path-pattern
          Values: ["/airflow/*"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AirflowTargetGroup

  MLModelPathRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListenerHTTP
      Priority: 15
      Conditions:
        - Field: path-pattern
          Values: ["/ml-model/*"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MLModelTargetGroup

  BackendPathRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListenerHTTP
      Priority: 20
      Conditions:
        - Field: path-pattern
          Values: ["/spring-backend/*"]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  MyClusterConfig:
    Type: AWS::MSK::Configuration
    Properties:
      Name: toilabs-msk-cluster
      ServerProperties: !Join ["\n", ["auto.create.topics.enable=true"]]

  # -------------------- RDS POSTGRESQL --------------------

  ToiLabsRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: toilabs-postgres
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: 17.5
      MasterUsername: toilabs_user
      MasterUserPassword: toilabs_pass
      DBSubnetGroupName: !Ref ToiLabsDBSubnetGroup
      VPCSecurityGroups: [!Ref PostgresSecurityGroup]
      DBName: toilabs
      PubliclyAccessible: false
      MultiAZ: false
      StorageType: gp2
      DeletionProtection: false

  MSKCluster:
    Type: AWS::MSK::Cluster
    Properties:
      ClusterName: toilabs-msk-cluster
      KafkaVersion: 3.6.0
      ConfigurationInfo:
        Arn: !Ref MyClusterConfig
        Revision: 1
      ClientAuthentication:
        Unauthenticated:
          Enabled: False # Must be disabled for public clusters
        Sasl:
          Iam:
            Enabled: True
      EncryptionInfo:
        EncryptionInTransit: # Must be set for public clusters
          ClientBroker: TLS
          InCluster: true
      NumberOfBrokerNodes: 2
      BrokerNodeGroupInfo:
        InstanceType: kafka.t3.small
        ClientSubnets:
          - !Ref PublicSubnet1Id
          - !Ref PublicSubnet2Id
        SecurityGroups:
          - !Ref KafkaSecurityGroup
        ConnectivityInfo:
          PublicAccess:
            Type: SERVICE_PROVIDED_EIPS

  # -------------------- IAM --------------------

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: toilabs-ecs-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
Outputs:
  ALBArn:
    Value: !Ref ToiLabsALB
  ALBDNS:
    Value: !GetAtt ToiLabsALB.DNSName
    Export:
      Name: toilabs-alb-dns
  FrontendTG:
    Value: !Ref FrontendTargetGroup
  AirflowTG:
    Value: !Ref AirflowTargetGroup
  ServiceSG:
    Value: !Ref ServiceSecurityGroup
  KafkaSG:
    Value: !Ref KafkaSecurityGroup
  PostgresSG:
    Value: !Ref PostgresSecurityGroup
  TaskExecutionRoleArn:
    Value: !GetAtt ECSTaskExecutionRole.Arn
  RDSEndpoint:
    Value: !GetAtt ToiLabsRDS.Endpoint.Address
  MLModelTG:
    Value: !Ref MLModelTargetGroup
  BackendTG:
    Value: !Ref BackendTargetGroup
